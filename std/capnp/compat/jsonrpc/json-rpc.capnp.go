// Code generated by capnpc-go. DO NOT EDIT.

package jsonrpc

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	json "capnproto.org/go/capnp/v3/std/capnp/json"
	strconv "strconv"
)

type RpcMessage capnp.Struct
type RpcMessage_Which uint16

const (
	RpcMessage_Which_none   RpcMessage_Which = 0
	RpcMessage_Which_params RpcMessage_Which = 1
	RpcMessage_Which_result RpcMessage_Which = 2
	RpcMessage_Which_error  RpcMessage_Which = 3
)

func (w RpcMessage_Which) String() string {
	const s = "noneparamsresulterror"
	switch w {
	case RpcMessage_Which_none:
		return s[0:4]
	case RpcMessage_Which_params:
		return s[4:10]
	case RpcMessage_Which_result:
		return s[10:16]
	case RpcMessage_Which_error:
		return s[16:21]

	}
	return "RpcMessage_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// RpcMessage_TypeID is the unique identifier for the type RpcMessage.
const RpcMessage_TypeID = 0xd3a68cd48aa056ca

func NewRpcMessage(s *capnp.Segment) (RpcMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RpcMessage(st), err
}

func NewRootRpcMessage(s *capnp.Segment) (RpcMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RpcMessage(st), err
}

func ReadRootRpcMessage(msg *capnp.Message) (RpcMessage, error) {
	root, err := msg.Root()
	return RpcMessage(root.Struct()), err
}

func (s RpcMessage) String() string {
	str, _ := text.Marshal(0xd3a68cd48aa056ca, capnp.Struct(s))
	return str
}

func (s RpcMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RpcMessage) DecodeFromPtr(p capnp.Ptr) RpcMessage {
	return RpcMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RpcMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s RpcMessage) Which() RpcMessage_Which {
	return RpcMessage_Which(capnp.Struct(s).Uint16(0))
}
func (s RpcMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RpcMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RpcMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RpcMessage) Jsonrpc() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RpcMessage) HasJsonrpc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RpcMessage) JsonrpcBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RpcMessage) SetJsonrpc(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RpcMessage) Id() (json.Value, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return json.Value(p.Struct()), err
}

func (s RpcMessage) HasId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RpcMessage) SetId(v json.Value) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewId sets the id field to a newly
// allocated json.Value struct, preferring placement in s's segment.
func (s RpcMessage) NewId() (json.Value, error) {
	ss, err := json.NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return json.Value{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RpcMessage) Method() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s RpcMessage) HasMethod() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RpcMessage) MethodBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s RpcMessage) SetMethod(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s RpcMessage) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s RpcMessage) Params() (json.Value, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != params")
	}
	p, err := capnp.Struct(s).Ptr(3)
	return json.Value(p.Struct()), err
}

func (s RpcMessage) HasParams() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(3)
}

func (s RpcMessage) SetParams(v json.Value) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated json.Value struct, preferring placement in s's segment.
func (s RpcMessage) NewParams() (json.Value, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := json.NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return json.Value{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RpcMessage) Result() (json.Value, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != result")
	}
	p, err := capnp.Struct(s).Ptr(3)
	return json.Value(p.Struct()), err
}

func (s RpcMessage) HasResult() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(3)
}

func (s RpcMessage) SetResult(v json.Value) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated json.Value struct, preferring placement in s's segment.
func (s RpcMessage) NewResult() (json.Value, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := json.NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return json.Value{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RpcMessage) Error() (RpcMessage_Error, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != error")
	}
	p, err := capnp.Struct(s).Ptr(3)
	return RpcMessage_Error(p.Struct()), err
}

func (s RpcMessage) HasError() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(3)
}

func (s RpcMessage) SetError(v RpcMessage_Error) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewError sets the error field to a newly
// allocated RpcMessage_Error struct, preferring placement in s's segment.
func (s RpcMessage) NewError() (RpcMessage_Error, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewRpcMessage_Error(capnp.Struct(s).Segment())
	if err != nil {
		return RpcMessage_Error{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RpcMessage_List is a list of RpcMessage.
type RpcMessage_List = capnp.StructList[RpcMessage]

// NewRpcMessage creates a new list of RpcMessage.
func NewRpcMessage_List(s *capnp.Segment, sz int32) (RpcMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[RpcMessage](l), err
}

// RpcMessage_Future is a wrapper for a RpcMessage promised by a client call.
type RpcMessage_Future struct{ *capnp.Future }

func (f RpcMessage_Future) Struct() (RpcMessage, error) {
	p, err := f.Future.Ptr()
	return RpcMessage(p.Struct()), err
}
func (p RpcMessage_Future) Id() json.Value_Future {
	return json.Value_Future{Future: p.Future.Field(1, nil)}
}
func (p RpcMessage_Future) Params() json.Value_Future {
	return json.Value_Future{Future: p.Future.Field(3, nil)}
}
func (p RpcMessage_Future) Result() json.Value_Future {
	return json.Value_Future{Future: p.Future.Field(3, nil)}
}
func (p RpcMessage_Future) Error() RpcMessage_Error_Future {
	return RpcMessage_Error_Future{Future: p.Future.Field(3, nil)}
}

type RpcMessage_Error capnp.Struct

// RpcMessage_Error_TypeID is the unique identifier for the type RpcMessage_Error.
const RpcMessage_Error_TypeID = 0xd0dd80fa25c37644

func NewRpcMessage_Error(s *capnp.Segment) (RpcMessage_Error, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RpcMessage_Error(st), err
}

func NewRootRpcMessage_Error(s *capnp.Segment) (RpcMessage_Error, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RpcMessage_Error(st), err
}

func ReadRootRpcMessage_Error(msg *capnp.Message) (RpcMessage_Error, error) {
	root, err := msg.Root()
	return RpcMessage_Error(root.Struct()), err
}

func (s RpcMessage_Error) String() string {
	str, _ := text.Marshal(0xd0dd80fa25c37644, capnp.Struct(s))
	return str
}

func (s RpcMessage_Error) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RpcMessage_Error) DecodeFromPtr(p capnp.Ptr) RpcMessage_Error {
	return RpcMessage_Error(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RpcMessage_Error) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RpcMessage_Error) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RpcMessage_Error) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RpcMessage_Error) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RpcMessage_Error) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RpcMessage_Error) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RpcMessage_Error) Message() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RpcMessage_Error) HasMessage() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RpcMessage_Error) MessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RpcMessage_Error) SetMessage(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RpcMessage_Error) Data() (json.Value, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return json.Value(p.Struct()), err
}

func (s RpcMessage_Error) HasData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RpcMessage_Error) SetData(v json.Value) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewData sets the data field to a newly
// allocated json.Value struct, preferring placement in s's segment.
func (s RpcMessage_Error) NewData() (json.Value, error) {
	ss, err := json.NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return json.Value{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RpcMessage_Error_List is a list of RpcMessage_Error.
type RpcMessage_Error_List = capnp.StructList[RpcMessage_Error]

// NewRpcMessage_Error creates a new list of RpcMessage_Error.
func NewRpcMessage_Error_List(s *capnp.Segment, sz int32) (RpcMessage_Error_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RpcMessage_Error](l), err
}

// RpcMessage_Error_Future is a wrapper for a RpcMessage_Error promised by a client call.
type RpcMessage_Error_Future struct{ *capnp.Future }

func (f RpcMessage_Error_Future) Struct() (RpcMessage_Error, error) {
	p, err := f.Future.Ptr()
	return RpcMessage_Error(p.Struct()), err
}
func (p RpcMessage_Error_Future) Data() json.Value_Future {
	return json.Value_Future{Future: p.Future.Field(1, nil)}
}

const schema_d04299800d6725ba = "x\xdal\x90\xbfkS_\x18\xc6\x9f\xe7='\xedw" +
	"HH\xee7\x01\xb1\xb4$\x0eYJ\x1bL\xebT\x90" +
	"\xd6\xd2\xa0\x82\x85\x9eV\\\x9c.\xc9%FL\xee\xe5" +
	"\xdc(\"B\x0an\"8\xbb\x09\x82\xab\x0e\x0a*\x0a" +
	"\x16uq\xaa?\x10\x1c\xfa?88\xd8\x90z\xe5\x18" +
	"\x9a\x8au;|\xde\xf7\x9c\xf3y\x9e\xe3\xa7\xb9\xa4\xab" +
	"\x99\x9e\x86\x98\x13\xa9\xb1d\xe5\xda\x9br\x7fsg\x1b" +
	"f\x82L\xde_\xb8\x7f\xfb\xf3\x9d\x87\x9f\x90\x92q`" +
	"\xbe,\xc2|\xd5\x1d\xf3\xb3\xf2\x08\x7f\xccM\x96L^" +
	"\x94\x9b\x99\xcd{\xcb\xdb\xa8\xe9q\x0d\xe4\xdf\xc9\xc7\xfc" +
	"\x079\x02\xcc\x7f\x95\xbb\xc4\x8d\xe4r\x1cvfmT" +
	"W\x95\xba\x1fu\xa2\x85\xf5\xa8\xbe\x1a\xc4\xb1\xdf\x0c*" +
	"5kC\x8b5\xd2\xa4\x95\x064\x01\xaf6\x0d\x98%" +
	"EsNH\x16\xe8\xd8\xd9e\xc0\xac(\x9a5\xa1'" +
	",P\x00o\xd5-\x9eQ4\xe7\x85\xd9z\xd8\x08\xa8" +
	"!\xd4`\xaf=|\x9ei\x08\xd3`\xb6\xe1w}\xe6" +
	"\x92[;Gwk\xd7\xfb\x0f\x002\x07\x8e\xc4\xe4o" +
	"1\x06F\x93\x07\xadx\x9c+\xfeV5\x93#\xcd\xa7" +
	"N\xe9\xb1\xa2y)\xf4\xf6=\x9fO\x00\xe6\x89\xa2y" +
	"\xed<e\xe8\xf9j\x010\xcf\x14\xcd[aF%I" +
	"\x81\x0a\xf0\xb6\xa6\xbd\xad\xa2\xf9\xa6h\x06\xc2)\xfd3" +
	"Q\x05j\xc0\xdbu\xdb\xdf\x15\xd7)\x9cJ\xed9\x9c" +
	"\x02\xbc=\x87\x7f(nh\xc7\xc7\x06\x8e\x8f\x01yr" +
	"\x0e0\x03\xc5\x8d\xff(\xec\xb9H6\xaa\xef'W\xad" +
	"\xc6\xe1\xdc\x8b\xed\xa0{)l\x8c\xda\xe9\x84\x1d\x97W" +
	"\x92\x937+\x93_\x8a\x17\xfb0Zx\xaaD\xa6\x81" +
	"*\xffgr\xac\xdd\x8a\xe3V\xa7\xa9J\x91o\xfdv" +
	"<S\xb2A|\xf5Jw\xa6\x14\xdaR`mH\x8b" +
	"\xf1\xc5\xe1\xec\x1f\xff\x0d\x97\x0f\x0f\x8a\xee\xaae\xee\xa0" +
	"\xe8!\xff\x15\x00\x00\xff\xff\xfb1\xad\xf9"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d04299800d6725ba,
		Nodes: []uint64{
			0xd0dd80fa25c37644,
			0xd3a68cd48aa056ca,
		},
		Compressed: true,
	})
}
