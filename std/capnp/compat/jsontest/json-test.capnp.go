// Code generated by capnpc-go. DO NOT EDIT.

package jsontest

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	json "capnproto.org/go/capnp/v3/std/capnp/json"
	strconv "strconv"
)

type TestJsonAnnotations capnp.Struct
type TestJsonAnnotations_aGroup TestJsonAnnotations
type TestJsonAnnotations_aGroup_flatBaz TestJsonAnnotations
type TestJsonAnnotations_aGroup_doubleFlat TestJsonAnnotations
type TestJsonAnnotations_prefixedGroup TestJsonAnnotations
type TestJsonAnnotations_prefixedGroup_baz TestJsonAnnotations
type TestJsonAnnotations_prefixedGroup_morePrefix TestJsonAnnotations
type TestJsonAnnotations_aUnion TestJsonAnnotations
type TestJsonAnnotations_aUnion_foo TestJsonAnnotations
type TestJsonAnnotations_aUnion_bar TestJsonAnnotations
type TestJsonAnnotations_simpleGroup TestJsonAnnotations
type TestJsonAnnotations_bUnion TestJsonAnnotations
type TestJsonAnnotations_unionWithVoid TestJsonAnnotations
type TestJsonAnnotations_aUnion_Which uint16

const (
	TestJsonAnnotations_aUnion_Which_foo TestJsonAnnotations_aUnion_Which = 0
	TestJsonAnnotations_aUnion_Which_bar TestJsonAnnotations_aUnion_Which = 1
)

func (w TestJsonAnnotations_aUnion_Which) String() string {
	const s = "foobar"
	switch w {
	case TestJsonAnnotations_aUnion_Which_foo:
		return s[0:3]
	case TestJsonAnnotations_aUnion_Which_bar:
		return s[3:6]

	}
	return "TestJsonAnnotations_aUnion_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type TestJsonAnnotations_bUnion_Which uint16

const (
	TestJsonAnnotations_bUnion_Which_foo TestJsonAnnotations_bUnion_Which = 0
	TestJsonAnnotations_bUnion_Which_bar TestJsonAnnotations_bUnion_Which = 1
)

func (w TestJsonAnnotations_bUnion_Which) String() string {
	const s = "foobar"
	switch w {
	case TestJsonAnnotations_bUnion_Which_foo:
		return s[0:3]
	case TestJsonAnnotations_bUnion_Which_bar:
		return s[3:6]

	}
	return "TestJsonAnnotations_bUnion_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type TestJsonAnnotations_unionWithVoid_Which uint16

const (
	TestJsonAnnotations_unionWithVoid_Which_intValue  TestJsonAnnotations_unionWithVoid_Which = 0
	TestJsonAnnotations_unionWithVoid_Which_voidValue TestJsonAnnotations_unionWithVoid_Which = 1
	TestJsonAnnotations_unionWithVoid_Which_textValue TestJsonAnnotations_unionWithVoid_Which = 2
)

func (w TestJsonAnnotations_unionWithVoid_Which) String() string {
	const s = "intValuevoidValuetextValue"
	switch w {
	case TestJsonAnnotations_unionWithVoid_Which_intValue:
		return s[0:8]
	case TestJsonAnnotations_unionWithVoid_Which_voidValue:
		return s[8:17]
	case TestJsonAnnotations_unionWithVoid_Which_textValue:
		return s[17:26]

	}
	return "TestJsonAnnotations_unionWithVoid_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TestJsonAnnotations_TypeID is the unique identifier for the type TestJsonAnnotations.
const TestJsonAnnotations_TypeID = 0xa814a516cf478f04

func NewTestJsonAnnotations(s *capnp.Segment) (TestJsonAnnotations, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 16})
	return TestJsonAnnotations(st), err
}

func NewRootTestJsonAnnotations(s *capnp.Segment) (TestJsonAnnotations, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 16})
	return TestJsonAnnotations(st), err
}

func ReadRootTestJsonAnnotations(msg *capnp.Message) (TestJsonAnnotations, error) {
	root, err := msg.Root()
	return TestJsonAnnotations(root.Struct()), err
}

func (s TestJsonAnnotations) String() string {
	str, _ := text.Marshal(0xa814a516cf478f04, capnp.Struct(s))
	return str
}

func (s TestJsonAnnotations) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TestJsonAnnotations) DecodeFromPtr(p capnp.Ptr) TestJsonAnnotations {
	return TestJsonAnnotations(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TestJsonAnnotations) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TestJsonAnnotations) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations) SomeField() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TestJsonAnnotations) HasSomeField() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TestJsonAnnotations) SomeFieldBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations) SetSomeField(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TestJsonAnnotations) AGroup() TestJsonAnnotations_aGroup {
	return TestJsonAnnotations_aGroup(s)
}

func (s TestJsonAnnotations_aGroup) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_aGroup) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_aGroup) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_aGroup) FlatFoo() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s TestJsonAnnotations_aGroup) SetFlatFoo(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s TestJsonAnnotations_aGroup) FlatBar() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TestJsonAnnotations_aGroup) HasFlatBar() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TestJsonAnnotations_aGroup) FlatBarBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations_aGroup) SetFlatBar(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s TestJsonAnnotations_aGroup) FlatBaz() TestJsonAnnotations_aGroup_flatBaz {
	return TestJsonAnnotations_aGroup_flatBaz(s)
}

func (s TestJsonAnnotations_aGroup_flatBaz) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_aGroup_flatBaz) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_aGroup_flatBaz) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_aGroup_flatBaz) Hello() bool {
	return capnp.Struct(s).Bit(32)
}

func (s TestJsonAnnotations_aGroup_flatBaz) SetHello(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

func (s TestJsonAnnotations_aGroup) DoubleFlat() TestJsonAnnotations_aGroup_doubleFlat {
	return TestJsonAnnotations_aGroup_doubleFlat(s)
}

func (s TestJsonAnnotations_aGroup_doubleFlat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_aGroup_doubleFlat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_aGroup_doubleFlat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_aGroup_doubleFlat) FlatQux() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s TestJsonAnnotations_aGroup_doubleFlat) HasFlatQux() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TestJsonAnnotations_aGroup_doubleFlat) FlatQuxBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations_aGroup_doubleFlat) SetFlatQux(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s TestJsonAnnotations) PrefixedGroup() TestJsonAnnotations_prefixedGroup {
	return TestJsonAnnotations_prefixedGroup(s)
}

func (s TestJsonAnnotations_prefixedGroup) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_prefixedGroup) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_prefixedGroup) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_prefixedGroup) Foo() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s TestJsonAnnotations_prefixedGroup) HasFoo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s TestJsonAnnotations_prefixedGroup) FooBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations_prefixedGroup) SetFoo(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s TestJsonAnnotations_prefixedGroup) Bar() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s TestJsonAnnotations_prefixedGroup) SetBar(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

func (s TestJsonAnnotations_prefixedGroup) Baz() TestJsonAnnotations_prefixedGroup_baz {
	return TestJsonAnnotations_prefixedGroup_baz(s)
}

func (s TestJsonAnnotations_prefixedGroup_baz) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_prefixedGroup_baz) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_prefixedGroup_baz) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_prefixedGroup_baz) Hello() bool {
	return capnp.Struct(s).Bit(33)
}

func (s TestJsonAnnotations_prefixedGroup_baz) SetHello(v bool) {
	capnp.Struct(s).SetBit(33, v)
}

func (s TestJsonAnnotations_prefixedGroup) MorePrefix() TestJsonAnnotations_prefixedGroup_morePrefix {
	return TestJsonAnnotations_prefixedGroup_morePrefix(s)
}

func (s TestJsonAnnotations_prefixedGroup_morePrefix) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_prefixedGroup_morePrefix) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_prefixedGroup_morePrefix) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_prefixedGroup_morePrefix) Qux() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s TestJsonAnnotations_prefixedGroup_morePrefix) HasQux() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s TestJsonAnnotations_prefixedGroup_morePrefix) QuxBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations_prefixedGroup_morePrefix) SetQux(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s TestJsonAnnotations) AUnion() TestJsonAnnotations_aUnion {
	return TestJsonAnnotations_aUnion(s)
}

func (s TestJsonAnnotations_aUnion) Which() TestJsonAnnotations_aUnion_Which {
	return TestJsonAnnotations_aUnion_Which(capnp.Struct(s).Uint16(6))
}
func (s TestJsonAnnotations_aUnion) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_aUnion) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_aUnion) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_aUnion) Foo() TestJsonAnnotations_aUnion_foo {
	return TestJsonAnnotations_aUnion_foo(s)
}

func (s TestJsonAnnotations_aUnion) SetFoo() {
	capnp.Struct(s).SetUint16(6, 0)
}

func (s TestJsonAnnotations_aUnion_foo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_aUnion_foo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_aUnion_foo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_aUnion_foo) FooMember() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s TestJsonAnnotations_aUnion_foo) HasFooMember() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s TestJsonAnnotations_aUnion_foo) FooMemberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations_aUnion_foo) SetFooMember(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s TestJsonAnnotations_aUnion_foo) MultiMember() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s TestJsonAnnotations_aUnion_foo) SetMultiMember(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

func (s TestJsonAnnotations_aUnion) Bar() TestJsonAnnotations_aUnion_bar {
	return TestJsonAnnotations_aUnion_bar(s)
}

func (s TestJsonAnnotations_aUnion) SetBar() {
	capnp.Struct(s).SetUint16(6, 1)
}

func (s TestJsonAnnotations_aUnion_bar) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_aUnion_bar) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_aUnion_bar) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_aUnion_bar) BarMember() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s TestJsonAnnotations_aUnion_bar) SetBarMember(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

func (s TestJsonAnnotations_aUnion_bar) MultiMember() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s TestJsonAnnotations_aUnion_bar) HasMultiMember() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s TestJsonAnnotations_aUnion_bar) MultiMemberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations_aUnion_bar) SetMultiMember(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s TestJsonAnnotations) Dependency() (TestJsonAnnotations2, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return TestJsonAnnotations2(p.Struct()), err
}

func (s TestJsonAnnotations) HasDependency() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s TestJsonAnnotations) SetDependency(v TestJsonAnnotations2) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewDependency sets the dependency field to a newly
// allocated TestJsonAnnotations2 struct, preferring placement in s's segment.
func (s TestJsonAnnotations) NewDependency() (TestJsonAnnotations2, error) {
	ss, err := NewTestJsonAnnotations2(capnp.Struct(s).Segment())
	if err != nil {
		return TestJsonAnnotations2{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TestJsonAnnotations) SimpleGroup() TestJsonAnnotations_simpleGroup {
	return TestJsonAnnotations_simpleGroup(s)
}

func (s TestJsonAnnotations_simpleGroup) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_simpleGroup) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_simpleGroup) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_simpleGroup) Grault() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s TestJsonAnnotations_simpleGroup) HasGrault() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s TestJsonAnnotations_simpleGroup) GraultBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations_simpleGroup) SetGrault(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

func (s TestJsonAnnotations) Enums() (TestJsonAnnotatedEnum_List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return TestJsonAnnotatedEnum_List(p.List()), err
}

func (s TestJsonAnnotations) HasEnums() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s TestJsonAnnotations) SetEnums(v TestJsonAnnotatedEnum_List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewEnums sets the enums field to a newly
// allocated TestJsonAnnotatedEnum_List, preferring placement in s's segment.
func (s TestJsonAnnotations) NewEnums(n int32) (TestJsonAnnotatedEnum_List, error) {
	l, err := NewTestJsonAnnotatedEnum_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TestJsonAnnotatedEnum_List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s TestJsonAnnotations) InnerJson() (json.Value, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return json.Value(p.Struct()), err
}

func (s TestJsonAnnotations) HasInnerJson() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s TestJsonAnnotations) SetInnerJson(v json.Value) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewInnerJson sets the innerJson field to a newly
// allocated json.Value struct, preferring placement in s's segment.
func (s TestJsonAnnotations) NewInnerJson() (json.Value, error) {
	ss, err := json.NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return json.Value{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TestJsonAnnotations) CustomFieldHandler() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s TestJsonAnnotations) HasCustomFieldHandler() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s TestJsonAnnotations) CustomFieldHandlerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations) SetCustomFieldHandler(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

func (s TestJsonAnnotations) TestBase64() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return []byte(p.Data()), err
}

func (s TestJsonAnnotations) HasTestBase64() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s TestJsonAnnotations) SetTestBase64(v []byte) error {
	return capnp.Struct(s).SetData(11, v)
}

func (s TestJsonAnnotations) TestHex() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return []byte(p.Data()), err
}

func (s TestJsonAnnotations) HasTestHex() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s TestJsonAnnotations) SetTestHex(v []byte) error {
	return capnp.Struct(s).SetData(12, v)
}

func (s TestJsonAnnotations) BUnion() TestJsonAnnotations_bUnion {
	return TestJsonAnnotations_bUnion(s)
}

func (s TestJsonAnnotations_bUnion) Which() TestJsonAnnotations_bUnion_Which {
	return TestJsonAnnotations_bUnion_Which(capnp.Struct(s).Uint16(16))
}
func (s TestJsonAnnotations_bUnion) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_bUnion) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_bUnion) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_bUnion) Foo() (string, error) {
	if capnp.Struct(s).Uint16(16) != 0 {
		panic("Which() != foo")
	}
	p, err := capnp.Struct(s).Ptr(13)
	return p.Text(), err
}

func (s TestJsonAnnotations_bUnion) HasFoo() bool {
	if capnp.Struct(s).Uint16(16) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(13)
}

func (s TestJsonAnnotations_bUnion) FooBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations_bUnion) SetFoo(v string) error {
	capnp.Struct(s).SetUint16(16, 0)
	return capnp.Struct(s).SetText(13, v)
}

func (s TestJsonAnnotations_bUnion) Bar() uint32 {
	if capnp.Struct(s).Uint16(16) != 1 {
		panic("Which() != bar")
	}
	return capnp.Struct(s).Uint32(20)
}

func (s TestJsonAnnotations_bUnion) SetBar(v uint32) {
	capnp.Struct(s).SetUint16(16, 1)
	capnp.Struct(s).SetUint32(20, v)
}

func (s TestJsonAnnotations) ExternalUnion() (TestJsonAnnotations3, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return TestJsonAnnotations3(p.Struct()), err
}

func (s TestJsonAnnotations) HasExternalUnion() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s TestJsonAnnotations) SetExternalUnion(v TestJsonAnnotations3) error {
	return capnp.Struct(s).SetPtr(14, capnp.Struct(v).ToPtr())
}

// NewExternalUnion sets the externalUnion field to a newly
// allocated TestJsonAnnotations3 struct, preferring placement in s's segment.
func (s TestJsonAnnotations) NewExternalUnion() (TestJsonAnnotations3, error) {
	ss, err := NewTestJsonAnnotations3(capnp.Struct(s).Segment())
	if err != nil {
		return TestJsonAnnotations3{}, err
	}
	err = capnp.Struct(s).SetPtr(14, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TestJsonAnnotations) UnionWithVoid() TestJsonAnnotations_unionWithVoid {
	return TestJsonAnnotations_unionWithVoid(s)
}

func (s TestJsonAnnotations_unionWithVoid) Which() TestJsonAnnotations_unionWithVoid_Which {
	return TestJsonAnnotations_unionWithVoid_Which(capnp.Struct(s).Uint16(18))
}
func (s TestJsonAnnotations_unionWithVoid) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations_unionWithVoid) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations_unionWithVoid) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations_unionWithVoid) IntValue() uint32 {
	if capnp.Struct(s).Uint16(18) != 0 {
		panic("Which() != intValue")
	}
	return capnp.Struct(s).Uint32(24)
}

func (s TestJsonAnnotations_unionWithVoid) SetIntValue(v uint32) {
	capnp.Struct(s).SetUint16(18, 0)
	capnp.Struct(s).SetUint32(24, v)
}

func (s TestJsonAnnotations_unionWithVoid) SetVoidValue() {
	capnp.Struct(s).SetUint16(18, 1)

}

func (s TestJsonAnnotations_unionWithVoid) TextValue() (string, error) {
	if capnp.Struct(s).Uint16(18) != 2 {
		panic("Which() != textValue")
	}
	p, err := capnp.Struct(s).Ptr(15)
	return p.Text(), err
}

func (s TestJsonAnnotations_unionWithVoid) HasTextValue() bool {
	if capnp.Struct(s).Uint16(18) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(15)
}

func (s TestJsonAnnotations_unionWithVoid) TextValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations_unionWithVoid) SetTextValue(v string) error {
	capnp.Struct(s).SetUint16(18, 2)
	return capnp.Struct(s).SetText(15, v)
}

// TestJsonAnnotations_List is a list of TestJsonAnnotations.
type TestJsonAnnotations_List = capnp.StructList[TestJsonAnnotations]

// NewTestJsonAnnotations creates a new list of TestJsonAnnotations.
func NewTestJsonAnnotations_List(s *capnp.Segment, sz int32) (TestJsonAnnotations_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 16}, sz)
	return capnp.StructList[TestJsonAnnotations](l), err
}

// TestJsonAnnotations_Future is a wrapper for a TestJsonAnnotations promised by a client call.
type TestJsonAnnotations_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_Future) Struct() (TestJsonAnnotations, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations(p.Struct()), err
}
func (p TestJsonAnnotations_Future) AGroup() TestJsonAnnotations_aGroup_Future {
	return TestJsonAnnotations_aGroup_Future{p.Future}
}

// TestJsonAnnotations_aGroup_Future is a wrapper for a TestJsonAnnotations_aGroup promised by a client call.
type TestJsonAnnotations_aGroup_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_aGroup_Future) Struct() (TestJsonAnnotations_aGroup, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_aGroup(p.Struct()), err
}
func (p TestJsonAnnotations_aGroup_Future) FlatBaz() TestJsonAnnotations_aGroup_flatBaz_Future {
	return TestJsonAnnotations_aGroup_flatBaz_Future{p.Future}
}

// TestJsonAnnotations_aGroup_flatBaz_Future is a wrapper for a TestJsonAnnotations_aGroup_flatBaz promised by a client call.
type TestJsonAnnotations_aGroup_flatBaz_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_aGroup_flatBaz_Future) Struct() (TestJsonAnnotations_aGroup_flatBaz, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_aGroup_flatBaz(p.Struct()), err
}
func (p TestJsonAnnotations_aGroup_Future) DoubleFlat() TestJsonAnnotations_aGroup_doubleFlat_Future {
	return TestJsonAnnotations_aGroup_doubleFlat_Future{p.Future}
}

// TestJsonAnnotations_aGroup_doubleFlat_Future is a wrapper for a TestJsonAnnotations_aGroup_doubleFlat promised by a client call.
type TestJsonAnnotations_aGroup_doubleFlat_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_aGroup_doubleFlat_Future) Struct() (TestJsonAnnotations_aGroup_doubleFlat, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_aGroup_doubleFlat(p.Struct()), err
}
func (p TestJsonAnnotations_Future) PrefixedGroup() TestJsonAnnotations_prefixedGroup_Future {
	return TestJsonAnnotations_prefixedGroup_Future{p.Future}
}

// TestJsonAnnotations_prefixedGroup_Future is a wrapper for a TestJsonAnnotations_prefixedGroup promised by a client call.
type TestJsonAnnotations_prefixedGroup_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_prefixedGroup_Future) Struct() (TestJsonAnnotations_prefixedGroup, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_prefixedGroup(p.Struct()), err
}
func (p TestJsonAnnotations_prefixedGroup_Future) Baz() TestJsonAnnotations_prefixedGroup_baz_Future {
	return TestJsonAnnotations_prefixedGroup_baz_Future{p.Future}
}

// TestJsonAnnotations_prefixedGroup_baz_Future is a wrapper for a TestJsonAnnotations_prefixedGroup_baz promised by a client call.
type TestJsonAnnotations_prefixedGroup_baz_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_prefixedGroup_baz_Future) Struct() (TestJsonAnnotations_prefixedGroup_baz, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_prefixedGroup_baz(p.Struct()), err
}
func (p TestJsonAnnotations_prefixedGroup_Future) MorePrefix() TestJsonAnnotations_prefixedGroup_morePrefix_Future {
	return TestJsonAnnotations_prefixedGroup_morePrefix_Future{p.Future}
}

// TestJsonAnnotations_prefixedGroup_morePrefix_Future is a wrapper for a TestJsonAnnotations_prefixedGroup_morePrefix promised by a client call.
type TestJsonAnnotations_prefixedGroup_morePrefix_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_prefixedGroup_morePrefix_Future) Struct() (TestJsonAnnotations_prefixedGroup_morePrefix, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_prefixedGroup_morePrefix(p.Struct()), err
}
func (p TestJsonAnnotations_Future) AUnion() TestJsonAnnotations_aUnion_Future {
	return TestJsonAnnotations_aUnion_Future{p.Future}
}

// TestJsonAnnotations_aUnion_Future is a wrapper for a TestJsonAnnotations_aUnion promised by a client call.
type TestJsonAnnotations_aUnion_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_aUnion_Future) Struct() (TestJsonAnnotations_aUnion, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_aUnion(p.Struct()), err
}
func (p TestJsonAnnotations_aUnion_Future) Foo() TestJsonAnnotations_aUnion_foo_Future {
	return TestJsonAnnotations_aUnion_foo_Future{p.Future}
}

// TestJsonAnnotations_aUnion_foo_Future is a wrapper for a TestJsonAnnotations_aUnion_foo promised by a client call.
type TestJsonAnnotations_aUnion_foo_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_aUnion_foo_Future) Struct() (TestJsonAnnotations_aUnion_foo, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_aUnion_foo(p.Struct()), err
}
func (p TestJsonAnnotations_aUnion_Future) Bar() TestJsonAnnotations_aUnion_bar_Future {
	return TestJsonAnnotations_aUnion_bar_Future{p.Future}
}

// TestJsonAnnotations_aUnion_bar_Future is a wrapper for a TestJsonAnnotations_aUnion_bar promised by a client call.
type TestJsonAnnotations_aUnion_bar_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_aUnion_bar_Future) Struct() (TestJsonAnnotations_aUnion_bar, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_aUnion_bar(p.Struct()), err
}
func (p TestJsonAnnotations_Future) Dependency() TestJsonAnnotations2_Future {
	return TestJsonAnnotations2_Future{Future: p.Future.Field(6, nil)}
}
func (p TestJsonAnnotations_Future) SimpleGroup() TestJsonAnnotations_simpleGroup_Future {
	return TestJsonAnnotations_simpleGroup_Future{p.Future}
}

// TestJsonAnnotations_simpleGroup_Future is a wrapper for a TestJsonAnnotations_simpleGroup promised by a client call.
type TestJsonAnnotations_simpleGroup_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_simpleGroup_Future) Struct() (TestJsonAnnotations_simpleGroup, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_simpleGroup(p.Struct()), err
}
func (p TestJsonAnnotations_Future) InnerJson() json.Value_Future {
	return json.Value_Future{Future: p.Future.Field(9, nil)}
}
func (p TestJsonAnnotations_Future) BUnion() TestJsonAnnotations_bUnion_Future {
	return TestJsonAnnotations_bUnion_Future{p.Future}
}

// TestJsonAnnotations_bUnion_Future is a wrapper for a TestJsonAnnotations_bUnion promised by a client call.
type TestJsonAnnotations_bUnion_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_bUnion_Future) Struct() (TestJsonAnnotations_bUnion, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_bUnion(p.Struct()), err
}
func (p TestJsonAnnotations_Future) ExternalUnion() TestJsonAnnotations3_Future {
	return TestJsonAnnotations3_Future{Future: p.Future.Field(14, nil)}
}
func (p TestJsonAnnotations_Future) UnionWithVoid() TestJsonAnnotations_unionWithVoid_Future {
	return TestJsonAnnotations_unionWithVoid_Future{p.Future}
}

// TestJsonAnnotations_unionWithVoid_Future is a wrapper for a TestJsonAnnotations_unionWithVoid promised by a client call.
type TestJsonAnnotations_unionWithVoid_Future struct{ *capnp.Future }

func (f TestJsonAnnotations_unionWithVoid_Future) Struct() (TestJsonAnnotations_unionWithVoid, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations_unionWithVoid(p.Struct()), err
}

type TestJsonAnnotations2 capnp.Struct

// TestJsonAnnotations2_TypeID is the unique identifier for the type TestJsonAnnotations2.
const TestJsonAnnotations2_TypeID = 0xf726f6fa6b58143c

func NewTestJsonAnnotations2(s *capnp.Segment) (TestJsonAnnotations2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TestJsonAnnotations2(st), err
}

func NewRootTestJsonAnnotations2(s *capnp.Segment) (TestJsonAnnotations2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TestJsonAnnotations2(st), err
}

func ReadRootTestJsonAnnotations2(msg *capnp.Message) (TestJsonAnnotations2, error) {
	root, err := msg.Root()
	return TestJsonAnnotations2(root.Struct()), err
}

func (s TestJsonAnnotations2) String() string {
	str, _ := text.Marshal(0xf726f6fa6b58143c, capnp.Struct(s))
	return str
}

func (s TestJsonAnnotations2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TestJsonAnnotations2) DecodeFromPtr(p capnp.Ptr) TestJsonAnnotations2 {
	return TestJsonAnnotations2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TestJsonAnnotations2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TestJsonAnnotations2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations2) Foo() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TestJsonAnnotations2) HasFoo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TestJsonAnnotations2) FooBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TestJsonAnnotations2) SetFoo(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TestJsonAnnotations2) Cycle() (TestJsonAnnotations, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return TestJsonAnnotations(p.Struct()), err
}

func (s TestJsonAnnotations2) HasCycle() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TestJsonAnnotations2) SetCycle(v TestJsonAnnotations) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCycle sets the cycle field to a newly
// allocated TestJsonAnnotations struct, preferring placement in s's segment.
func (s TestJsonAnnotations2) NewCycle() (TestJsonAnnotations, error) {
	ss, err := NewTestJsonAnnotations(capnp.Struct(s).Segment())
	if err != nil {
		return TestJsonAnnotations{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TestJsonAnnotations2_List is a list of TestJsonAnnotations2.
type TestJsonAnnotations2_List = capnp.StructList[TestJsonAnnotations2]

// NewTestJsonAnnotations2 creates a new list of TestJsonAnnotations2.
func NewTestJsonAnnotations2_List(s *capnp.Segment, sz int32) (TestJsonAnnotations2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TestJsonAnnotations2](l), err
}

// TestJsonAnnotations2_Future is a wrapper for a TestJsonAnnotations2 promised by a client call.
type TestJsonAnnotations2_Future struct{ *capnp.Future }

func (f TestJsonAnnotations2_Future) Struct() (TestJsonAnnotations2, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations2(p.Struct()), err
}
func (p TestJsonAnnotations2_Future) Cycle() TestJsonAnnotations_Future {
	return TestJsonAnnotations_Future{Future: p.Future.Field(1, nil)}
}

type TestJsonAnnotations3 capnp.Struct
type TestJsonAnnotations3_Which uint16

const (
	TestJsonAnnotations3_Which_foo TestJsonAnnotations3_Which = 0
	TestJsonAnnotations3_Which_bar TestJsonAnnotations3_Which = 1
)

func (w TestJsonAnnotations3_Which) String() string {
	const s = "foobar"
	switch w {
	case TestJsonAnnotations3_Which_foo:
		return s[0:3]
	case TestJsonAnnotations3_Which_bar:
		return s[3:6]

	}
	return "TestJsonAnnotations3_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TestJsonAnnotations3_TypeID is the unique identifier for the type TestJsonAnnotations3.
const TestJsonAnnotations3_TypeID = 0xd5533065ce7c825f

func NewTestJsonAnnotations3(s *capnp.Segment) (TestJsonAnnotations3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TestJsonAnnotations3(st), err
}

func NewRootTestJsonAnnotations3(s *capnp.Segment) (TestJsonAnnotations3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TestJsonAnnotations3(st), err
}

func ReadRootTestJsonAnnotations3(msg *capnp.Message) (TestJsonAnnotations3, error) {
	root, err := msg.Root()
	return TestJsonAnnotations3(root.Struct()), err
}

func (s TestJsonAnnotations3) String() string {
	str, _ := text.Marshal(0xd5533065ce7c825f, capnp.Struct(s))
	return str
}

func (s TestJsonAnnotations3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TestJsonAnnotations3) DecodeFromPtr(p capnp.Ptr) TestJsonAnnotations3 {
	return TestJsonAnnotations3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TestJsonAnnotations3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s TestJsonAnnotations3) Which() TestJsonAnnotations3_Which {
	return TestJsonAnnotations3_Which(capnp.Struct(s).Uint16(4))
}
func (s TestJsonAnnotations3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestJsonAnnotations3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestJsonAnnotations3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestJsonAnnotations3) Foo() uint32 {
	if capnp.Struct(s).Uint16(4) != 0 {
		panic("Which() != foo")
	}
	return capnp.Struct(s).Uint32(0)
}

func (s TestJsonAnnotations3) SetFoo(v uint32) {
	capnp.Struct(s).SetUint16(4, 0)
	capnp.Struct(s).SetUint32(0, v)
}

func (s TestJsonAnnotations3) Bar() (TestFlattenedStruct, error) {
	if capnp.Struct(s).Uint16(4) != 1 {
		panic("Which() != bar")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return TestFlattenedStruct(p.Struct()), err
}

func (s TestJsonAnnotations3) HasBar() bool {
	if capnp.Struct(s).Uint16(4) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TestJsonAnnotations3) SetBar(v TestFlattenedStruct) error {
	capnp.Struct(s).SetUint16(4, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBar sets the bar field to a newly
// allocated TestFlattenedStruct struct, preferring placement in s's segment.
func (s TestJsonAnnotations3) NewBar() (TestFlattenedStruct, error) {
	capnp.Struct(s).SetUint16(4, 1)
	ss, err := NewTestFlattenedStruct(capnp.Struct(s).Segment())
	if err != nil {
		return TestFlattenedStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TestJsonAnnotations3_List is a list of TestJsonAnnotations3.
type TestJsonAnnotations3_List = capnp.StructList[TestJsonAnnotations3]

// NewTestJsonAnnotations3 creates a new list of TestJsonAnnotations3.
func NewTestJsonAnnotations3_List(s *capnp.Segment, sz int32) (TestJsonAnnotations3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TestJsonAnnotations3](l), err
}

// TestJsonAnnotations3_Future is a wrapper for a TestJsonAnnotations3 promised by a client call.
type TestJsonAnnotations3_Future struct{ *capnp.Future }

func (f TestJsonAnnotations3_Future) Struct() (TestJsonAnnotations3, error) {
	p, err := f.Future.Ptr()
	return TestJsonAnnotations3(p.Struct()), err
}
func (p TestJsonAnnotations3_Future) Bar() TestFlattenedStruct_Future {
	return TestFlattenedStruct_Future{Future: p.Future.Field(0, nil)}
}

type TestFlattenedStruct capnp.Struct

// TestFlattenedStruct_TypeID is the unique identifier for the type TestFlattenedStruct.
const TestFlattenedStruct_TypeID = 0xb1cc94eb5141adf8

func NewTestFlattenedStruct(s *capnp.Segment) (TestFlattenedStruct, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TestFlattenedStruct(st), err
}

func NewRootTestFlattenedStruct(s *capnp.Segment) (TestFlattenedStruct, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TestFlattenedStruct(st), err
}

func ReadRootTestFlattenedStruct(msg *capnp.Message) (TestFlattenedStruct, error) {
	root, err := msg.Root()
	return TestFlattenedStruct(root.Struct()), err
}

func (s TestFlattenedStruct) String() string {
	str, _ := text.Marshal(0xb1cc94eb5141adf8, capnp.Struct(s))
	return str
}

func (s TestFlattenedStruct) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TestFlattenedStruct) DecodeFromPtr(p capnp.Ptr) TestFlattenedStruct {
	return TestFlattenedStruct(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TestFlattenedStruct) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TestFlattenedStruct) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestFlattenedStruct) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestFlattenedStruct) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestFlattenedStruct) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TestFlattenedStruct) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TestFlattenedStruct) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TestFlattenedStruct) SetValue(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// TestFlattenedStruct_List is a list of TestFlattenedStruct.
type TestFlattenedStruct_List = capnp.StructList[TestFlattenedStruct]

// NewTestFlattenedStruct creates a new list of TestFlattenedStruct.
func NewTestFlattenedStruct_List(s *capnp.Segment, sz int32) (TestFlattenedStruct_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TestFlattenedStruct](l), err
}

// TestFlattenedStruct_Future is a wrapper for a TestFlattenedStruct promised by a client call.
type TestFlattenedStruct_Future struct{ *capnp.Future }

func (f TestFlattenedStruct_Future) Struct() (TestFlattenedStruct, error) {
	p, err := f.Future.Ptr()
	return TestFlattenedStruct(p.Struct()), err
}

type TestJsonAnnotatedEnum uint16

// TestJsonAnnotatedEnum_TypeID is the unique identifier for the type TestJsonAnnotatedEnum.
const TestJsonAnnotatedEnum_TypeID = 0xeca76f3df6b22dbb

// Values of TestJsonAnnotatedEnum.
const (
	TestJsonAnnotatedEnum_foo TestJsonAnnotatedEnum = 0
	TestJsonAnnotatedEnum_bar TestJsonAnnotatedEnum = 1
	TestJsonAnnotatedEnum_baz TestJsonAnnotatedEnum = 2
	TestJsonAnnotatedEnum_qux TestJsonAnnotatedEnum = 3
)

// String returns the enum's constant name.
func (c TestJsonAnnotatedEnum) String() string {
	switch c {
	case TestJsonAnnotatedEnum_foo:
		return "foo"
	case TestJsonAnnotatedEnum_bar:
		return "bar"
	case TestJsonAnnotatedEnum_baz:
		return "baz"
	case TestJsonAnnotatedEnum_qux:
		return "qux"

	default:
		return ""
	}
}

// TestJsonAnnotatedEnumFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TestJsonAnnotatedEnumFromString(c string) TestJsonAnnotatedEnum {
	switch c {
	case "foo":
		return TestJsonAnnotatedEnum_foo
	case "bar":
		return TestJsonAnnotatedEnum_bar
	case "baz":
		return TestJsonAnnotatedEnum_baz
	case "qux":
		return TestJsonAnnotatedEnum_qux

	default:
		return 0
	}
}

type TestJsonAnnotatedEnum_List = capnp.EnumList[TestJsonAnnotatedEnum]

func NewTestJsonAnnotatedEnum_List(s *capnp.Segment, sz int32) (TestJsonAnnotatedEnum_List, error) {
	return capnp.NewEnumList[TestJsonAnnotatedEnum](s, sz)
}

type TestBase64Union capnp.Struct
type TestBase64Union_Which uint16

const (
	TestBase64Union_Which_foo TestBase64Union_Which = 0
	TestBase64Union_Which_bar TestBase64Union_Which = 1
)

func (w TestBase64Union_Which) String() string {
	const s = "foobar"
	switch w {
	case TestBase64Union_Which_foo:
		return s[0:3]
	case TestBase64Union_Which_bar:
		return s[3:6]

	}
	return "TestBase64Union_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TestBase64Union_TypeID is the unique identifier for the type TestBase64Union.
const TestBase64Union_TypeID = 0xe36a2dc2a7ba9f0a

func NewTestBase64Union(s *capnp.Segment) (TestBase64Union, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TestBase64Union(st), err
}

func NewRootTestBase64Union(s *capnp.Segment) (TestBase64Union, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TestBase64Union(st), err
}

func ReadRootTestBase64Union(msg *capnp.Message) (TestBase64Union, error) {
	root, err := msg.Root()
	return TestBase64Union(root.Struct()), err
}

func (s TestBase64Union) String() string {
	str, _ := text.Marshal(0xe36a2dc2a7ba9f0a, capnp.Struct(s))
	return str
}

func (s TestBase64Union) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TestBase64Union) DecodeFromPtr(p capnp.Ptr) TestBase64Union {
	return TestBase64Union(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TestBase64Union) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s TestBase64Union) Which() TestBase64Union_Which {
	return TestBase64Union_Which(capnp.Struct(s).Uint16(0))
}
func (s TestBase64Union) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TestBase64Union) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TestBase64Union) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TestBase64Union) Foo() ([]byte, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != foo")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s TestBase64Union) HasFoo() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TestBase64Union) SetFoo(v []byte) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetData(0, v)
}

func (s TestBase64Union) Bar() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != bar")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TestBase64Union) HasBar() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TestBase64Union) BarBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TestBase64Union) SetBar(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(0, v)
}

// TestBase64Union_List is a list of TestBase64Union.
type TestBase64Union_List = capnp.StructList[TestBase64Union]

// NewTestBase64Union creates a new list of TestBase64Union.
func NewTestBase64Union_List(s *capnp.Segment, sz int32) (TestBase64Union_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TestBase64Union](l), err
}

// TestBase64Union_Future is a wrapper for a TestBase64Union promised by a client call.
type TestBase64Union_Future struct{ *capnp.Future }

func (f TestBase64Union_Future) Struct() (TestBase64Union, error) {
	p, err := f.Future.Ptr()
	return TestBase64Union(p.Struct()), err
}

const schema_c9d405cf4333e4c9 = "x\xda\xacWo\x8cTW\x15?\xe7\xde7\x7fv\x99" +
	"a\xde\xe5\xbd-\x90@\x1eL\xaa\x16\xec\xac\xb0\x03\xd4" +
	"\xaem\x87]]\xa0\xe8\x9a};\xbb\xd8\xae5\xe5\xcd" +
	"\xce]\x98:\xf3\xde0\xf3\xa6\xdd\xd9\xf4ODI\xd5" +
	"\xacQ\x0c1\x15?\xf8\xa14@\xb4!4\x92\x18\xad" +
	"5j\x8d\xc1(\xa4\xb1\x88~\xe8\x07\xdb\x9aV\xd4\xc6" +
	"\x98X\x05\x95g\xce\x9b?o\x16\x86u7\xe9\xa7\xdd" +
	"\xb9\xf7\xbcs\xcf\xf9\x9d\xf3\xfb\x9d{\xb7TC;\x95" +
	"\xad\xf1D\x0c\x989\x1f\x0a{\xea\xba\xb7.\x9c?\xf1" +
	"\xe4<\x98\x1fD\xc5\xfb\x82\xb5\xed\x0f\x87\x06\xb7\x1f\x85" +
	">5\x82\x00\xe9\xbf\x86\xe6\x10P\xbb\x1az\x0c0\xd8" +
	"4oG\xc5S\xbe\xba\xfb\xe2m\xcf\xe9\xa7`R\x8d" +
	" C\x9e\xfeLx\x8al\x0ba\xb2=\xfd\xea3/" +
	"\xef\xf9\xf7\xbeo\xdc`\xdbt{5\xfcu2\xed\x89" +
	"\xbc\x05\x18l\x9a**\xde\xf97\xd3\x1f\xbd\x18z\xf5" +
	"<\x84\xd4\x08YF\x92\xa8\xf5D\xe9\xdfPt5\x07" +
	"\xf4>\x99{&\x13\xfb\x80q\xa6k\x14\xd1\xf4\xfd1" +
	"?\x8a\xc9\x18E\xf1\xe4;\xcf\xfd\xe8\xcd\xccw\xce6" +
	"\x92\xbb\xfc\xad\x81S\xfb3\xeb\x7f\xdd\x8a\xe2\xf7\xb1\xe3" +
	"d\xfa\xa7X\x06\xd0\xfb\xd7\xf3C\xe6\x9f\x8f\xfd\xea," +
	"\x08\x15;\x82@:\xb9'\x9eDmm<\x02\xa0\xf5" +
	"\xc5\xc9\xf8\xd8\xfc\xf5C\xb1\xfb\xbe\xfc\xb3\xee~\xb7\xc7" +
	"_ \xbf#\xbe\xe9\x95\x9d\xaf\x1b\xf3\x17\x9e~\x19\xcc" +
	"\x01T\x02X\x9a\xa62~\x85L\xeb\xbe\xe9\x89\xbb\xf7" +
	"\xf1\xa1\x17\xdf\xf9e\x97\xcc8\xf6\xa4\xbf\x19\xf7A;" +
	"\x1d?\x03\x18\x9c\xd9\x15\xdf\xd1\x95>\x08\x0f\xae$|" +
	"_{c\xff\xf6\xd5\x13\x0f\xbe\xd2=\x82\x91\x84\x1f\xec" +
	"d\x82\"x\xf8\xf0\xe3\x17\xe4\x96\xec%*E\x07\x0a" +
	"#\x18a\xc8\xd2\xb5\xc4f\xd4\x8e$\"\xda\x91\x84\xa1" +
	"=\x9f \x80\xd3\xe5\xaf\xdd\xff\xd2Gv_\xee\x1eF" +
	"J=L\xbe\xefV\xc9w\xef\xb7\x7fp\xf2\xa7\xa9G" +
	"\xde\xe8\xe2\x1b \xfd9\x95\xa1\xf6\x15*\xb9\xf6%\x95" +
	"<\xff0\xf5\xc2\xbb\xf7:'\xff\x02Be\x815`" +
	":$\x06P\xeb\x13d)\xc4\x01@\xef\xe9\xfcKW" +
	"\xe6O<\xfb\xf7\xee\x1d|D\xf8\x1d|T\x90\xd3{" +
	"\xf4\x07>{\xed\xdd\xf7\xff\xf3\x86\"3*\xf2?\xc4" +
	"f\xd4B\xab\xc8/\xaez\x0c^\xf4\x1e\xa9:v\xca" +
	"\x95U\xc5\xed\x9f\xb6\xcavypBV\xdd\xbdU\xc7" +
	"\x1e\xb2m\xc7\xb5\xdc\x82cW\xfb\xadI\xbb\x90q\xec" +
	"\xfe\x19\xc71\xa3\\QC:\xf6\x00\x88M\xe3\x00\xe6" +
	"\x1d\x1c\xcdm\x0c\x05r\x1d{\x01\xc4\xd6\x1c\x80\xb9\x85" +
	"\xa3y\x0fCo\xc6qFe)'\x01+\x18\x03\x86" +
	"1@\xafT+\xba\x85QY\x82HNV0\x0a\x0c" +
	"\xa3\x80K\x8f\x83;6\xc5\x10\xf3<\xc4\x80\xd7bS" +
	"Rl2\x00\xe3x\x9d\xd6\xdbh\x89\xedI\xb1\xfd." +
	"\xc0\x08\x85\xae \xf3~\xbc\x83\x9f\x19\x7f\xfb7\x87\xc1" +
	"T\x18\x0e\xa9\x88*\xc0N\x04\x8c\xe4\xac\x8a\x19]`" +
	"\xa02\x1cZ\x87\xde\xbd\x8f\xf7\xaf\xfb\xad\xf1\xe9k`" +
	"\xaea8tG\xfb\x0b\x8c\x01\x08\xccy\x15i[%" +
	"\x99O\x01\xb9\x00hg\x12Z,\x93rE\xce\x14f" +
	"e~w\xc5\xa9a\xd9T\xb9\xa2r\x1dC\x00\xc2J" +
	"\x02\x98\x0fq4\x0f\x12\xa8L\xc70\x80\x90I!\x0d" +
	"\xf3\x8b\x1c\xcdc\x0c\x91aG\xbf\x8b\xa3I`\xc8\xb1" +
	"\x83\x84\xa2>%\x9e0\x1aI\xb7`\xf7\xf3#\x00\x82" +
	"t\x08\x00\xfdVi\xb4\x0a\x13\xc9Ys^\xc9\xa9\xc8" +
	"\xb1\x8a\x9c\x01^\x98\xed\x82\xa2\xde\xc4D\xe0\xe6\xc4\xec" +
	"L\xb9\xbf\x03\x04~+\x10\"\x8e]\x1dC4?\xcc" +
	"\x15\x00\x05\x01\xb4:\x8ekO\xa0\x91\xfd.r\xcc~" +
	"\x9f\x92D\xec\x90\x00\xed\x1c\x0ej\xe7\xd0\x80F\xfem" +
	"\x86k?\xc1\x8a\xf6s\x7f\x9d@h3C\xbb\x84\x83" +
	"\xda%\xbc\x0bP(a\x1d\xe3\x00Z\x9cM\x01dc" +
	"\x8ccv\x0dc\x88!\xec\xe0\xb6\xd6\xc7r\xc0D8" +
	"\xaac\x82\xd8\xc1\x06\x00\xb2\xff\xc1\xa6\xad\x88\xf4\xe8\x94" +
	"\xa4\xd6\xc7\xc6\x01\xb2:\xf9\xd8@\xeb\xd1^\x1d\x05\x80" +
	"\xb6\x9e\x1d\x07\xc8n\xa0\xf5;i\xbdg\x85\x8e\xab\x00" +
	"\xb4MlJK1#\xbb\x87v&h\xa77\xa6\xa3" +
	"\x06\xa0\x99lX3\x99\x91-\xd2\xce,\xc5\xb3\x02;" +
	"\x84_\xab\xb1A\xad\xc6(\xfe\xd8J\x1do\x03\xd0N" +
	"\xb3\x0a@\xf6\x14\xd9\x7f\x8f\xec\xe3\xd8!\xa7\xdaYV" +
	"\xd1\xce1\x03\xd0\xab:%\xb9\xab \x8b\x80\xf9.%" +
	"\xdf\xe0\x97|+\xaeB\x8f*^MM[\xdc~x" +
	"\xda\xb1]\xab`o\xb4\xec\xba{\xb0`\x1f\xd80." +
	"\xadb\x11\xeb\x00\xad\x0e\xcaX\xd4\xac\xe5EY\xe4\xb5" +
	"\xfa\x1a\x8c[\x19w6Kyf\xb6\x1f C\xb4&" +
	"Vwc_\x0e\x8f\xbf\xf2\xf6\xb1\x93\x17\x1b\xec\xdb\x12" +
	"\xb0\x8f\xfe2\x11\x9a\x02\xf0j\xf4y\xca\xad\x03/K" +
	"\x00//\xcb\xd2\xceK\x1b\xf8t\x1d\xd5@\x0e\xfd\x8f" +
	"\xd0\xab\x16J\xe5\xa2\xdc]\x81\x88S+\x1b\xd2\xae\x95" +
	"\xaa\xb8\x12p\x8c#&\x02A\x06\xa4E\xaf`\xdb\xb2" +
	"\xb2\xb7\xea\x00\xda\xa8z\x9f\x7fm\xed\xd5\x91\xd9k\xcf" +
	"\xb6\\M\xd7\xaa\xaeS\xdaU@Y\xcc\xef\xb1\xec|" +
	"\x91\xcb@\xe7\\Yu\x87\xad\xaa\x04\xbec\x9b\x8f\xc3" +
	"\xc7\xef{_\xefH\xfdw\x97\x1b8\xc4\x108\xc6\x81" +
	"a\x1c\xf0)\xb2\xdd#\x1b\xdc:\xf7\x8b?\xf6~\xe8" +
	"u\xebo7\x9berK\x06\xea\xce\x1b\x80\"\x8e\x0f" +
	"fr\xfb\xacb\x8d \x92\xb3\xae\xac\xd8V\x11\x0c\xdf" +
	"#\xaa\xc1Pl\xa6\xe6c\xfa\xa9\x82\x0b\xc6\xc1}N" +
	"\xa1\xd1G\xc1\x11\x14\xd9\x9av\x0d6\x03$\xdc\xba\x8f" +
	"\xfd\x92d<\x17\xc8\xf8:\xcf\x8b\xeb\xa8\xd30!\xdd" +
	"\xbb\x9d\xa3\xb9\x85\xe1z\xbc\xee\x85t\xec\x03\x10\xa9\xa4" +
	"H\x19\xe6\x18G\xf3!\xf6\x9e\x08\xda\xd2\xf4\xb9\xd1\xeb" +
	"\xfd3E\xcb\x1d\xe6\xd6\x9c\xa9pE\xdd\xa0#\x07\x10" +
	"\xf1\x01\x003\xca\xd1\xd4\x19\x1a\x07e\xb1\xe8 \x02C" +
	"\xecp\xbd@\xf5v\x15-\xd7\x95\xb6\xccg\xddJ\xa4" +
	"6\xed\x92\xea)-\xd5[\xe8\xedQ*O\xbb\x81\x96" +
	"\x13h\xde\xa9\xe5\x8a\x86\xa4\xb3\xfcX\x99\x8e\x0ay\x1f" +
	"\x0e\xbc?E\xc9\x98\xb5\xd9\x9b\xfc\x87\x97:\xa8\xca\xfd" +
	"\x8dA\x90\xa0%\xff\x18E\xc7(\x1d\x93\x0c\x8e\x89\x1c" +
	"\xear\xc4\xa2)\xb4Z\x8d\x1a\x0d\xf3f\xcc\xef\x8a\xb0" +
	"\x8e\xab\x01\xc4\xc8^\x00\xf3c\x1c\xcd1\xe6\xcfv\x1d" +
	"\xd7\x00\x88Q\xbax|\x82\xa3\xf9\x00\xc3\xf5\xec\xbf^" +
	"B\xc7\xb5\x00b\x92\x96'8\x9a\xfb\x191\xd7mv" +
	"{P\xfaG\x9dB\x9e\x16\x01%\x84=W\xce\xba\xcd" +
	"_7\x05\xac\xfc?\xccy\xcd\x9f\xda\x00:R\x19\xad" +
	"\xe1\xce\xa9\x8d:\x12\xe3$-\xee\xe7h\x16\x9bC\xbb" +
	"}S\x17\x85aQh\x8d\xac\xf6=\xbb5\xb7\xfdJ" +
	"\xedr\x9cV\xdc\xfe\xefa\xab--\xcd\xdfs\x8b\xb4" +
	"\xff\xe1v\xfbc\xd3\x18H\x19\xa9K\xe4\xae\"pj" +
	"\x93\xc5t|\xd9\x97\x18\xa3\xdc\x9fk\xf2d\xa3N\xef" +
	"\x89e\xf3\xa4\xd3{\xc2\xb1\xabi\x9f(K\x92\x9d\xe6" +
	"\x85\xd0'T\xa7\x8e4:\x06\xdb2\xd2l\x19_F" +
	"\x82\xfbMeQ(P\x0d^MMm\\\x128\xad" +
	"1\xe3\xd4\xca\xe0\xc3\x12\xd1q%\xc12(\xe2F\xeb" +
	"\x82\x9c9P\xb1jEw\x91B\xce\x05:\xd64\x0e" +
	"&rw\x1ci\xe6\xec\xd8\xe6\xeb:\x10\x84\x0b\xb0\x11" +
	"\x9b\x8c\x85t\xa2\xe5Q\x82l\x0fGs\x82\x05\x17\xe5" +
	"[O+\x82l\xf1\x10:\xb0\x90F~\xc4\xae\x95(" +
	"\x10\xd5'\x05\xd5\x07QlL\x8a\x8d\x0621\x94\x14" +
	"C\x06r\xff\xdaKg/W\xd6#\xb9Ey\xb0\xd0" +
	"~\x0e\x80\xe4iy\x8f\x1e\xffa\xd0\xb8\x9f\xaf\xb8\xe9" +
	"\xd1\x13\xd2\xfds\x16<zrV\xa5\xfd\xe8i)\xcf" +
	"\xc2G\xcfR\xc1\xf3y0\xd0,bs`4j\xd8" +
	"\xecd_jhu\x92\xc8\xd61%\x97\x08\xc9\x8c\xe3" +
	"\x04\xeddL\xd7\xa7\x8b\x12\xd5\xe0\x85\xdb\xe8\xf7\xff\x05" +
	"\x00\x00\xff\xff\xc2\x87\x95A"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c9d405cf4333e4c9,
		Nodes: []uint64{
			0x8c7ea4c9cee71c10,
			0x91353a71e1346184,
			0x9656fb48c498d4a9,
			0xa814a516cf478f04,
			0xaf1f270c3f98624e,
			0xb1ab3fe4bda5ee7e,
			0xb1cc94eb5141adf8,
			0xc38a3e0c71fe8c94,
			0xc487ce8c1fe240ea,
			0xcaeebc41035639a4,
			0xcd1d3f60a8329bd7,
			0xd15954173560e3dd,
			0xd5533065ce7c825f,
			0xd7473bbe49907033,
			0xe36a2dc2a7ba9f0a,
			0xeca76f3df6b22dbb,
			0xf2a3a48ceabe6487,
			0xf726f6fa6b58143c,
		},
		Compressed: true,
	})
}
